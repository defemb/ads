import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

public class Hotel {
	public static void main(String[] args) {
	    Hotel hotel = new Hotel();

	    // Welcome message
	    System.out.println("*** Welcome to the Hotel Reservation App ***");

	    // Main menu
	    int choice;
	    do {
	        // Display the main menu options
	        System.out.println("\n*** Main Menu ***");
	        System.out.println("1. Reserve a single room");
	        System.out.println("2. Reserve a group of rooms");
	        System.out.println("3. Search for a reservation");
	        System.out.println("4. Display total income generated by all reserved rooms");
	        System.out.println("5. Display guests' data");
	        System.out.println("6. Display number of rooms available per class");
	        System.out.println("7. Exit");

	        // Get user's choice
	        choice = getUserChoice();

	        // Execute the chosen option
	        switch (choice) {
	            case 1:
	                reserveSingleRoom(hotel);
	                break;
	            case 2:
	                reserveGroupOfRooms(hotel);
	                break;
	            case 3:
	                searchForReservation(hotel);
	                break;
	            case 4:
	                displayTotalIncome(hotel);
	                break;
	            case 5:
	                displayGuestsData(hotel);
	                break;
	            case 6:
	                displayAvailableRoomsPerClass(hotel);
	                break;
	            case 7:
	                System.out.println("\nGoodbye!");
	                break;
	            default:
	                System.out.println("Invalid choice. Please enter a number between 1 and 7.");
	        }
	    } while (choice != 7);
	}
		
	// Fields to store room information
    private Map<String, Room> rooms; // Map to store room classes and their corresponding rooms
    private Map<String, Integer> rates; // Map to store room classes and their corresponding rates
    private Map<String, List<Guest>> reservations; // Map to store guest reservations

    // Constructor to initialize the hotel with rooms and reservations
    public Hotel() {
	    // Method to initialize rooms in the hotel
        this.rooms = new HashMap<>(); // Initialize the rooms map
        // Add standard, deluxe, and superior rooms to the hotel
        this.rooms.put("Standard", new Room("Standard", "Comfortable and budget-friendly accommodation", 1, 250, new String[]{"Twin", "Double"}));
        this.rooms.put("Deluxe", new Room("Deluxe", "Enhanced comfort and additional space", 251, 500, new String[]{"Queen-size"}));
        this.rooms.put("Superior", new Room("Superior", "Luxury and premium services", 501, 530, new String[]{"Queen-size", "King-size"}));
	    
        // Method to initialize the rates for different room classes
        this.rates = new HashMap<>();
        this.rates.put("Standard", 1000);
        this.rates.put("Deluxe", 1200);
        this.rates.put("Superior", 1800);

        this.reservations = new HashMap<>(); // Initialize the reservations map
    }

    // Getter method to retrieve the rooms map
    public Map<String, Room> getRooms() {
        return rooms;
    }

    // Getter method to retrieve the rates map
    public Map<String, Integer> getRates() {
        return rates;
    }

    // Getter method to retrieve the reservations map
    public Map<String, List<Guest>> getReservations() {
        return reservations;
    }
 
    private static boolean reserveSingleRoom(Hotel hotel) {
        System.out.println("\n*** Reserve a Single Room ***");
        Scanner scanner = new Scanner(System.in);
        String roomClass = selectRoomClass(hotel);
        Object[] roomSelection = roomSelection(hotel.getRooms().get(roomClass), hotel);     
        int roomNumber = (int) roomSelection[0];
        String bedType = (String) roomSelection[1];
        
        // Prompt user to enter guest's first name
        System.out.print("Enter guest's first name: ");
        String guestFirstName = scanner.nextLine();

        // Prompt user to enter guest's last name
        System.out.print("Enter guest's last name: ");
        String guestLastName = scanner.nextLine();

        // Prompt user to enter length of stay   
        int lengthOfStay = 0;
        do {
            System.out.print("Enter the length of stay (in nights): ");
            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input. Please enter a valid number.");
                System.out.print("Enter the length of stay (in nights): ");
                scanner.next(); // Consume invalid input
            }
            lengthOfStay = scanner.nextInt();
            if (lengthOfStay <= 0 || lengthOfStay > 30) {
                System.out.println("Invalid length of stay. Please choose between 1 and 30 nights.");
            }
        } while (lengthOfStay <= 0 || lengthOfStay > 30);
        scanner.nextLine(); // Consume newline

        // Create guest object
        Guest guest = new Guest(guestFirstName, guestLastName, lengthOfStay, roomNumber, roomClass, bedType);

        // If the last name already exists in the map, add the guest to the existing list
        if (hotel.getReservations().containsKey(guestLastName)) {
        	hotel.getReservations().get(guestLastName).add(guest);
        } else {
            // If the last name does not exist, create a new list and add the guest to it
            List<Guest> reservationList = new ArrayList<>();
            reservationList.add(guest);
            hotel.getReservations().put(guestLastName, reservationList);
        }
        
        // Display reservation details
        System.out.println("Room reserved successfully.");
        System.out.println("\n" + guest.toString());

        // Prompt user if they wish to reserve another room
        System.out.print("Do you wish to reserve another room? Select Yes (Y) or No (N): ");
        String choice = scanner.nextLine();
        if (choice.equalsIgnoreCase("N")) {
            return true; // Return true to indicate successful reservation
        } else if (choice.equalsIgnoreCase("Y")) {
            // If user wishes to reserve another room, recursively call the method
            return reserveSingleRoom(hotel);
        } else {
            System.out.println("Invalid choice. Assuming 'No'.");
            return true; // Return true to indicate successful reservation
        }
    }

    private static void reserveGroupOfRooms(Hotel hotel) {
    	System.out.println("\n*** Reserve a Group of Rooms ***");
    	Scanner scanner = new Scanner(System.in);

        int numRooms = 0;
        do {
            System.out.print("Enter the number of rooms required together (maximum 3): ");
            numRooms = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (numRooms <= 0 || numRooms > 3) {
                System.out.println("Invalid number of rooms. Please choose between 1 and 3.");
            }
        } while (numRooms <= 0 || numRooms > 3);
        
        List<Guest> reservations = new ArrayList<>();
        String roomClass = selectRoomClass(hotel);
        
        for (int i = 1; i <= numRooms; i++) {
            String bedType = selectBedType(hotel.getRooms().get(roomClass), hotel);
            int roomNumber = assignRoomNumber(roomClass, hotel);

            // Prompt user to enter guest's details
            System.out.println("Enter the " + i + getOrdinalSuffix(i) + " guest's first name: ");
            String guestFirstName = scanner.nextLine();
            System.out.println("Enter the " + i + getOrdinalSuffix(i) + " guest's last name: ");
            String guestLastName = scanner.nextLine();
            System.out.print("Enter the length of stay (nights): ");
            int lengthOfStay = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Create guest object
            Guest guest = new Guest(guestFirstName, guestLastName, lengthOfStay, roomNumber, roomClass, bedType);

            // If the last name already exists in the map, add the guest to the existing list
            if (hotel.getReservations().containsKey(guestLastName)) {
                hotel.getReservations().get(guestLastName).add(guest);
            } else {
                // If the last name does not exist, create a new list and add the guest to it
                List<Guest> reservationList = new ArrayList<>();
                reservationList.add(guest);
                hotel.getReservations().put(guestLastName, reservationList);
            }
        }
        	// Display reservation details
	        System.out.println("First Name      | Last Name       | Length of Stay (nights) | Room Reserved | Class     | Type");
	        System.out.println("-------------------------------------------------------------------------------------");
	        for (Guest guest : reservations) {
	            System.out.printf("%-16s| %-16s| %-25d| %-14d| %-10s| %-8s%n", guest.getFirstName(), guest.getLastName(),
	                    guest.getLengthOfStay(), guest.getRoomNumber(), guest.getRoomClass(), guest.getBedType());
	        }
	        System.out.println("-------------------------------------------------------------------------------------");
	    }        

    
    private static String selectRoomClass(Hotel hotel) {
	    // Create a Scanner object to read user input
	    Scanner scanner = new Scanner(System.in);
	    String roomClass;
	
	    // Prompt user to choose a room class
	    do {
	    	System.out.print("Enter the choice of class (" + String.join(", ", hotel.getRooms().keySet()) + "): ");
	    	roomClass = scanner.nextLine();
	
	        // Check if there are available rooms for the selected class
	        Room selectedRoom = hotel.getRooms().get(roomClass);
	        if (selectedRoom == null) {
	            System.out.println("Invalid room class. Please try again.");
	            continue;
	        }
	
	        boolean availableRoomsFound = false;
	        for (int i = selectedRoom.startRoomNumber; i <= selectedRoom.endRoomNumber; i++) {
	            if (selectedRoom.isRoomAvailable(i, hotel)) {
	                availableRoomsFound = true;
	                break;
	            }
	        }
	        if (!availableRoomsFound) {
	            System.out.println("No available rooms for the selected class.");
	        }
	    } while (!hotel.getRooms().containsKey(roomClass));
	    return roomClass;
	    }

    private static Object[] roomSelection(Room selectedRoom, Hotel hotel) {
        Scanner scanner = new Scanner(System.in);
        
        // Initialize variables
        int roomNumber = -1;
        String bedType = "";

        do {
        	// Initialize bedTypes
        	String[] bedTypes = selectedRoom.getPossibleBedTypes();

        	// Prompt user to choose a bed type or room number
        	System.out.print("Enter the choice of bed type (" + String.join(", ", bedTypes) + ") or room number: ");
        	String bedOrRoom = scanner.nextLine();

            try {
                roomNumber = Integer.parseInt(bedOrRoom);
                // Room number selected

                // Validate the room number
                if (!selectedRoom.isValidRoomNumber(roomNumber) || !selectedRoom.isRoomAvailable(roomNumber, hotel)) {
                    System.out.println("Invalid room number or room not available. Please try again.");
                    return roomSelection(selectedRoom, hotel); // Restart the method to prompt the user again
                } else {
                	// Return the selected room number and default bed type
                    return new Object[] { roomNumber, bedTypes[0] };
                }
            } catch (NumberFormatException e) {
                // Bed type selected
                bedType = bedOrRoom; // Store the input as it is

                // Validate the bed type
                if (!Arrays.asList(selectedRoom.getPossibleBedTypes()).contains(bedType)) {
                    System.out.println("Invalid bed type. Please try again.");
                    return roomSelection(selectedRoom, hotel); // Restart the method to prompt the user again
                }
                else {
                	// Automatically assign the first available room number
                    for (int i = selectedRoom.startRoomNumber; i <= selectedRoom.endRoomNumber; i++) {
                        if (selectedRoom.isValidRoomNumber(i) && selectedRoom.isRoomAvailable(i, hotel)) {
                        	// Return the selected room number and chosen bed type
                        	return new Object[] { i, bedType };
                        }
                    }
                }
            }
            // If the code reaches this point, the input was invalid, so loop again
        } while (true); // Loop until a valid choice is entered
    }
    
    private static String selectBedType(Room selectedRoom, Hotel hotel) {
        Scanner scanner = new Scanner(System.in);

        // Prompt user to choose a bed type
        System.out.print("Enter the choice of bed type (" + String.join(", ", selectedRoom.getPossibleBedTypes()) + "): ");
        String bedType = scanner.nextLine();

        // Validate the bed type
        while (!Arrays.asList(selectedRoom.getPossibleBedTypes()).contains(bedType)) {
            System.out.println("Invalid bed type. Please try again.");
            System.out.print("Enter the choice of bed type: ");
            bedType = scanner.nextLine();
        }

        return bedType;
    }
    
    private static int assignRoomNumber(String roomClass, Hotel hotel) {
        Room selectedRoom = hotel.getRooms().get(roomClass);
        for (int i = selectedRoom.startRoomNumber; i <= selectedRoom.endRoomNumber; i++) {
            if (selectedRoom.isValidRoomNumber(i) && selectedRoom.isRoomAvailable(i, hotel)) {
                return i;
            }
        }
        return -1; // No available room found
    }

    private static void searchForReservation(Hotel hotel) {
        Scanner scanner = new Scanner(System.in);

        // Prompt user to enter guest's last name
        System.out.print("Enter guest's last name: ");
        String guestLastName = scanner.nextLine();

        // Search for reservations with the given last name
        List<Guest> matchingReservations = new ArrayList<>();
        if (hotel.getReservations().containsKey(guestLastName)) {
            matchingReservations.addAll(hotel.getReservations().get(guestLastName));
        }

        // Check if multiple reservations are found with the same last name
        if (matchingReservations.isEmpty()) {
            System.out.println("No reservation found for guest with last name: " + guestLastName);
        } else if (matchingReservations.size() == 1) {
            // Only one reservation found
            System.out.println("Reservation found.\n\n" + matchingReservations.get(0).toString());
        } else {
            // Multiple reservations found
            System.out.println("Multiple reservations found with the same last name:");
            for (Guest guest : matchingReservations) {
                System.out.println(guest.toString());
            }
        }
    }

    private static void displayTotalIncome(Hotel hotel) {
    	System.out.println("\n*** Display total income generated ***");
        // Create a map to store the total income generated for each room class
        Map<String, Integer> incomeByRoomClass = new HashMap<>();

        // Iterate over reservations to calculate total income for each room class
        for (List<Guest> guests : hotel.getReservations().values()) {
            for (Guest guest : guests) {
                String roomClass = guest.getRoomClass();
                int lengthOfStay = guest.getLengthOfStay();
                int rate = hotel.getRates().get(roomClass);
                // Calculate income for this reservation (rate * length of stay)
                int incomeForReservation = rate * lengthOfStay;

                // Update total income for this room class
                incomeByRoomClass.put(roomClass, incomeByRoomClass.getOrDefault(roomClass, 0) + incomeForReservation);
            }
        }


        // Display total income generated for each room class   
        System.out.println(String.format("%-15s | %-25s | %-25s |", "Class", "Number of rooms", "Total income generated"));
        System.out.println("-------------------------------------------------------------------------");
        
        for (String roomClass : incomeByRoomClass.keySet()) {
            int totalIncomeForClass = incomeByRoomClass.get(roomClass);
            long numRooms = hotel.getReservations().values().stream()
                    .flatMap(List::stream) // Flatten the list of guests into a stream
                    .filter(guest -> guest.getRoomClass().equals(roomClass))
                    .count(); // Count the number of reservations for this room class
            System.out.printf("%-15s | %-25d | %-25d |\n", roomClass, numRooms, totalIncomeForClass);
        }
    }


    private static void displayGuestsData(Hotel hotel) {
        System.out.println("\n*** Display guests' data ***");
        // Print the titles
        System.out.println(String.format("\n%-15s | %-15s | %-25s | %-15s | %-15s | %-15s |",
                "First name", "Last name", "Length of stay (nights)", "Room Reserved", "Class", "Type"));
        System.out.println("---------------------------------------------------------------------------------------------------------------------");

        // Create a sorted list of guest entries based on last name
        List<Map.Entry<String, List<Guest>>> sortedGuests = new ArrayList<>(hotel.getReservations().entrySet());
        Collections.sort(sortedGuests, Comparator.comparing(entry -> entry.getKey()));


        // Display details of all guests (first name, last name, length of stay, room class, bed type)
        for (Map.Entry<String, List<Guest>> entry : sortedGuests) {
            List<Guest> guestsWithSameLastName = entry.getValue();
            for (Guest guest : guestsWithSameLastName) {
                // Print guest details without title
                System.out.printf("%-15s | %-15s | %-25d | %-15d | %-15s | %-15s |%n", guest.getFirstName(),
                        guest.getLastName(), guest.getLengthOfStay(), guest.getRoomNumber(), guest.getRoomClass(), guest.getBedType());
            }
        }
    }


    private static void displayAvailableRoomsPerClass(Hotel hotel) {
    	System.out.println("\n*** Display number of rooms available per class ***");
        // Create a Scanner object to read user input
        Scanner scanner = new Scanner(System.in);

        // Prompt the user to choose a room class
        System.out.print("\nEnter the choice of room class (" + String.join(", ", hotel.getRooms().keySet()) + ") to view: ");
        String roomClass = scanner.nextLine();

        // Validate user input
        while (!hotel.getRooms().containsKey(roomClass)) {
            System.out.println("Invalid room class. Please try again.");
            System.out.print("Enter the choice of room class (" + String.join(", ", hotel.getRooms().keySet()) + ") to view: ");
            roomClass = scanner.nextLine();
        }

        // Get the selected room class
        Room room = hotel.getRooms().get(roomClass);

        // Count the number of reserved and available rooms for the selected class
        int reservedRooms = 0;
        int availableRooms = 0;
        for (int i = room.getStartRoomNumber(); i <= room.getEndRoomNumber(); i++) {
            if (room.isRoomAvailable(i, hotel)) {
                availableRooms++;
            } else {
                reservedRooms++;
            }
        }

        // Calculate the total number of rooms
        int totalRooms = room.getEndRoomNumber() - room.getStartRoomNumber() + 1;

        // Display the number of reserved, available, and total rooms for the selected class
        System.out.printf("\n%-15s | %-15s | %-15s | %-15s |\n", "Class", "Reserved", "Available", "Total");
        System.out.printf("-----------------------------------------------------------------------\n");
        System.out.printf("%-15s | %-15d | %-15d | %-15d |\n", roomClass, reservedRooms, availableRooms, totalRooms);

    }
    
    public static class Room {
        // Fields to store room information
        private String roomClass; // Type of the room
        private String description; // Description of the room
        private int startRoomNumber; // Start room number for this room class
        private int endRoomNumber; // End room number for this room class
        private String[] possibleBedTypes; // Array to store possible bed types in the room

        // Constructor
        private Room(String roomClass, String description, int startRoomNumber, int endRoomNumber, String[] possibleBedTypes) {
            this.roomClass = roomClass;
            this.description = description;
            this.startRoomNumber = startRoomNumber;
            this.endRoomNumber = endRoomNumber;
            this.possibleBedTypes = possibleBedTypes; // Assign possible bed types           
        }

        // Getter method for room description
        public String getDescription() {
            return description;
        }
        
        // Getter method for start room number
        public int getStartRoomNumber() {
            return startRoomNumber;
        }
        
        // Getter method for end room number
        public int getEndRoomNumber() {
            return endRoomNumber;
        }
        
        // Method to validate the room number for the specified room class
        public boolean isValidRoomNumber(int roomNumber) {
            return roomNumber >= startRoomNumber && roomNumber <= endRoomNumber;
        }
        
        // Inside the Room class
        public boolean isRoomAvailable(int roomNumber, Hotel hotel) {
            for (List<Guest> guests : hotel.getReservations().values()) {
                for (Guest guest : guests) {
                    if (guest.getRoomNumber() == roomNumber) {
                        return false; // Room is reserved 
                    }
                }
            }
            return true; // Room is available
        }


        // Getter method to retrieve possible bed types in the room
        public String[] getPossibleBedTypes() {
            return possibleBedTypes;
        }
    }

    public static class Guest {
        // Fields to store guest information
        private String firstName;
        private String lastName;
        private int lengthOfStay;
        private int roomNumber; // Room number where the guest is staying
        private String roomClass; // Class of the room where the guest is staying
        private String bedType; // Type of bed in the room

        // Constructor to initialize guest information
        public Guest(String firstName, String lastName, int lengthOfStay, int roomNumber, String roomClass, String bedType) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.lengthOfStay = lengthOfStay;
            this.roomNumber = roomNumber;
            this.roomClass = roomClass;
            this.bedType = bedType;
        }

        // Getter method for first name
        public String getFirstName() {
            return firstName;
        }

        // Getter method for last name
        public String getLastName() {
            return lastName;
        }

        // Getter method for length of stay
        public int getLengthOfStay() {
            return lengthOfStay;
        }

        // Getter method for room number
        public int getRoomNumber() {
            return roomNumber;
        }

        // Getter method for room class
        public String getRoomClass() {
            return roomClass;
        }

        // Getter method for bed type
        public String getBedType() {
            return bedType;
        }
        
        public String toString() {
            return String.format("%-15s | %-15s | %-25s | %-15s | %-15s | %-15s |\n",
                    "First name", "Last name", "Length of stay (nights)", "Room Reserved", "Class", "Type") +
            		("---------------------------------------------------------------------------------------------------------------------") +
                    String.format("\n%-15s | %-15s | %-25d | %-15d | %-15s | %-15s |\n",
                    firstName, lastName, lengthOfStay, roomNumber, roomClass, bedType);
        }
        
        public String toDataString() {
            return String.format("%-15s | %-15s | %-25d | %-15d | %-15s | %-15s |",
                    firstName, lastName, lengthOfStay, roomNumber, roomClass, bedType);
        }
    }

	// Method to get the user choice and ensure it is valid
    static int getUserChoice() {
    	// Create a Scanner object to read user input
        Scanner keyboard = new Scanner(System.in);
        
        // Prompt the user to enter their choice
        System.out.print("\nEnter your choice (1-7): ");
        
        // Validate user input, ensuring it is an integer
        while (!keyboard.hasNextInt()) {
            System.out.println("Invalid input. Please enter a number.");
            keyboard.next();
        }
        return keyboard.nextInt();
    }
    
    private static String getOrdinalSuffix(int number) {
        if (number >= 11 && number <= 13) {
            return "th";
        }
        switch (number % 10) {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    }
	
}
